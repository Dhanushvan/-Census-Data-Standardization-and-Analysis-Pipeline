# -*- coding: utf-8 -*-
"""Project 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iPk3tFcAPHUyQM7o4x4REcaAuJYqepKO

Importing Dataset from google Drive
"""

# Mounting of Google drive
from google.colab import drive
drive.mount('/content/drive')

# Importing Dataset from google drive
import pandas as pd
df=pd.read_excel('/content/drive/MyDrive/Project capstone/census_2011.xlsx')

"""Task 1: Rename the Column names"""

# Renaming the column names as per required.
df. rename(columns={'State name': 'State/UT','District name':'District','Male_Literate':'Literate_Male','Female_Literate':'Literate_Female',
                    'Rural_Households':'Households_Rural','Urban_Households':'Households_Urban','Age_Group_0_29':'Young_and_Adult',
                    'Age_Group_30_49':'Middle_Aged','Age_Group_50':'Senior_Citizen','Age not stated':'Age_Not_Stated'},inplace=True)

"""Task 2: Rename State/UT Names"""

# # For uniformity renaming of column is done and Replacing "And" to "and"
df['State/UT']=df['State/UT'].str.title()
df['State/UT']=df['State/UT'].str.replace(' And ',' and ')

"""
Task 3: New State/UT formation
"""

# From the additional given text file according corresponding district has been to corresponding state/UT.
df.loc[df['District'] == 'Leh(Ladakh)','State/UT']='Ladakh'
df.loc[df['District'] == 'Kargil','State/UT']='Ladakh'
df.loc[df['District'] == 'Adilabad','State/UT']='Telangana'
df.loc[df['District'] == 'Nizamabad','State/UT']='Telangana'
df.loc[df['District'] == 'Karimnagar','State/UT']='Telangana'
df.loc[df['District'] == 'Medak','State/UT']='Telangana'
df.loc[df['District'] == 'Hyderabad','State/UT']='Telangana'
df.loc[df['District'] == 'Rangareddy','State/UT']='Telangana'
df.loc[df['District'] == 'Mahbubnagar','State/UT']='Telangana'
df.loc[df['District'] == 'Nalgonda','State/UT']='Telangana'
df.loc[df['District'] == 'Warangal','State/UT']='Telangana'
df.loc[df['District'] == 'Khammam','State/UT']='Telangana'

"""Task 4: Find and process Missing Data"""

# to find find the overall missing data we are importing the data prep package
!pip install dataprep

# Before filling the missing data report
from dataprep.eda import create_report
create_report(df)

# Filling the missing value in population column
missing_pop=df['Male']+df['Female']
df['Population'].fillna(missing_pop,inplace=True)
df['Population'].isnull().sum()

# Filling the missing value of population by using different column.
df['Population'].fillna(df['Young_and_Adult']+df['Middle_Aged']+df['Senior_Citizen']+df['Age_Not_Stated'],inplace=True)
df['Population'].isnull().sum()
df.isnull().sum()

# Filling missing value in male column
df['Male'].fillna(df['Population']-df['Female'], inplace=True)
df['Male'].isnull().sum()

# Filling missing value in Female column
df['Female'].fillna(df['Population']-df['Male'], inplace=True)
df['Female'].isnull().sum()

# Filling missing value in Literate column
df['Literate'].fillna(df['Literate_Male']+df['Literate_Female'],inplace=True)
df['Literate'].isnull().sum()

# Filling missing value in Literate male column
df['Literate_Male'].fillna(df['Literate']-df['Literate_Female'],inplace=True)
df['Literate_Male'].isnull().sum()

# Filling missing value in Literate Female column
df['Literate_Female'].fillna(df['Literate']-df['Literate_Male'],inplace=True)
df['Literate_Female'].isnull().sum()

# Filling missing value in Households column
df['Households'].fillna(df['Households_Rural']+df['Households_Urban'],inplace=True)
df['Households'].isnull().sum()

# Filling missing value in Households Rural column
df['Households_Rural'].fillna(df['Households']-df['Households_Urban'],inplace=True)
df['Households_Rural'].isnull().sum()

# Filling missing value in Households urban column
df['Households_Urban'].fillna(df['Households']-df['Households_Rural'],inplace=True)
df['Households_Urban'].isnull().sum()

# Filling missing value in Age not stated column
A=df['Young_and_Adult']+df['Middle_Aged']+df['Senior_Citizen']
df['Age_Not_Stated'].fillna(df['Population']- A,inplace=True)
df['Age_Not_Stated'].isnull().sum()

# Filling missing value in young and adult column
B=df['Age_Not_Stated']+df['Middle_Aged']+df['Senior_Citizen']
df['Young_and_Adult'].fillna(df['Population']- B,inplace=True)
df['Young_and_Adult'].isnull().sum()

# Filling missing value in Middle aged column
C=df['Young_and_Adult']+df['Age_Not_Stated']+df['Senior_Citizen']
df['Middle_Aged'].fillna(df['Population']- C,inplace=True)
df['Middle_Aged'].isnull().sum()

# Filling missing value in Senior citizen column
D=df['Young_and_Adult']+df['Age_Not_Stated']+df['Age_Not_Stated']
df['Senior_Citizen'].fillna(df['Population']- D,inplace=True)
df['Senior_Citizen'].isnull().sum()

# Filling missing value in Worker column
df['Workers'].fillna(df['Male_Workers']+df['Female_Workers'],inplace=True)
df['Workers'].isnull().sum()

# Report after filling in missing value of some columns
create_report(df)

"""Task  5: Save Data to MongoDB"""

# To save the processed data in mongodb
!pip install pymongo

from pymongo import MongoClient

# Connection with the MongoDB server
cli=MongoClient('mongodb+srv://new_user1707:rootpassword123@cluster0.cp0gxex.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0')
db=cli.census_data
col=db.census

# Inserting the records in database
col.insert_many(df.to_dict('records'))

# Converting data from mongo db to a dataframe
from pandas import DataFrame

df = DataFrame(list(db.census.find({})))

df

list(df)

df.drop("_id",axis=1,inplace=True)
df

!pip install flask_sqlalchemy

"""Task 6: Database connection and data upload"""

# To push data from MongoDB to pgadmin
import sqlalchemy

engine= sqlalchemy.create_engine("postgresql://postgres:Rootpassword@database-1.chsgu44ki2c2.us-east-1.rds.amazonaws.com:5432/census")

df.to_sql("census_data",con=engine,if_exists="replace")

pip uninstall sqlalchemy==2.0.29

pip uninstall sqlalchemy

pip install sqlalchemy==1.4.52

df

import psycopg2

# Connection AWS RDBS with pgadmin
conn = psycopg2.connect(
  dbname="census",
  user='postgres',
  password='Rootpassword',
  host="database-1.chsgu44ki2c2.us-east-1.rds.amazonaws.com",
  port="5432"
)

# Fixing the cursor
cursor = conn.cursor()

cursor.execute("select * from census_data;")
print(cursor.fetchall())

conn.commit()

"""Streamlit"""

!pip install streamlit

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py

! wget -q -O - ipv4.icanhazip.com

! streamlit run app.py & npx localtunnel --port 8501

"""Task 7: Run Query on the database and show output on streamlit"""

# Total population of each district
cursor.execute('select census_data."District",census_data."Population" from census_data order by census_data."District" asc;')
print(cursor.fetchall())
conn.commit()

# literate males and females are there in each district
cursor.execute('select census_data."District",census_data."Literate_Male", census_data."Literate_Female" from census_data order by census_data."District" asc;')
print(cursor.fetchall())
conn.commit()

conn.commit()

# Percentage of workers (both male and female) in each district
cursor.execute('select census_data."District",(census_data."Workers"/census_data."Population")*100 as "Workers percentage" from census_data order by census_data."District" asc;')
print(cursor.fetchall())
conn.commit()

# Households have access to LPG or PNG as a cooking fuel in each district
cursor.execute('select census_data."District",census_data."LPG_or_PNG_Households" from census_data order by census_data."District" asc;')
print(cursor.fetchall())
conn.commit()

# Religious composition (Hindus, Muslims, Christians, etc.) of each district
cursor.execute('select census_data."District",census_data."Hindus", census_data."Muslims", census_data."Christians", census_data."Sikhs", census_data."Buddhists", census_data."Jains", census_data."Others_Religions" from census_data order by census_data."District" asc;')
print(cursor.fetchall())
conn.commit()

# Households have internet access in each district
cursor.execute('select census_data."District",census_data."Households_with_Internet" from census_data order by census_data."District" asc;')
print(cursor.fetchall())
conn.commit()

# The educational attainment distribution (below primary, primary, middle, secondary, etc.) in each district
cursor.execute('select census_data."District",census_data."Below_Primary_Education", census_data."Primary_Education", census_data."Middle_Education", census_data."Secondary_Education", census_data."Higher_Education", census_data."Graduate_Education", census_data."Other_Education", census_data."Literate_Education", census_data."Illiterate_Education" from census_data order by census_data."District" asc;')
print(cursor.fetchall())
conn.commit()

# Households have access to various modes of transportation (bicycle, car, radio, television, etc.) in each district
cursor.execute('select census_data."District",census_data."Households_with_Bicycle", census_data."Households_with_Car_Jeep_Van", census_data."Households_with_Radio_Transistor", census_data."Households_with_Scooter_Motorcycle_Moped", census_data."Households_with_Telephone_Mobile_Phone_Landline_only", census_data."Households_with_Telephone_Mobile_Phone_Mobile_only", census_data."Households_with_TV_Computer_Laptop_Telephone_mobile_phone_and_Scooter_Car", census_data."Households_with_Television", census_data."Households_with_Telephone_Mobile_Phone", census_data."Households_with_Telephone_Mobile_Phone_Both" from census_data order by census_data."District" asc;')
print(cursor.fetchall())
conn.commit()

# The condition of occupied census houses (dilapidated, with separate kitchen, with bathing facility, with latrine facility, etc.) in each district
cursor.execute('select census_data."District", census_data."Households_with_separate_kitchen_Cooking_inside_house", census_data."Having_bathing_facility_Total_Households", census_data."Having_latrine_facility_within_the_premises_Total_Households" from census_data order by census_data."District" asc;')
print(cursor.fetchall())
conn.commit()

# The household size distributed (1 person, 2 persons, 3-5 persons, etc.) in each district
cursor.execute('select census_data."District",census_data."Household_size_1_person_Households", census_data."Household_size_2_persons_Households", census_data."Household_size_1_to_2_persons", census_data."Household_size_3_persons_Households", census_data."Household_size_3_to_5_persons_Households", census_data."Household_size_4_persons_Households", census_data."Household_size_5_persons_Households", census_data."Household_size_6_8_persons_Households", census_data."Household_size_9_persons_and_above_Households" from census_data order by census_data."District" asc;')
print(cursor.fetchall())
conn.commit()

# The total number of households in each state
cursor.execute('select census_data."State/UT",sum(census_data."Households") from census_data group by census_data."State/UT" order by census_data."State/UT" asc;')
print(cursor.fetchall())
conn.commit()

# The average household size in each state
cursor.execute('select census_data."State/UT",avg(census_data."Household_size_1_person_Households"), avg(census_data."Household_size_2_persons_Households"), avg(census_data."Household_size_1_to_2_persons"), avg(census_data."Household_size_3_persons_Households"), avg(census_data."Household_size_3_to_5_persons_Households"), avg(census_data."Household_size_4_persons_Households"), avg(census_data."Household_size_5_persons_Households"), avg(census_data."Household_size_6_8_persons_Households"), avg(census_data."Household_size_9_persons_and_above_Households") from census_data group by census_data."State/UT" order by census_data."State/UT" asc;')
print(cursor.fetchall())
conn.commit()

# Households are owned versus rented in each state
cursor.execute('select census_data."State/UT",sum(census_data."Ownership_Owned_Households"), sum(census_data."Ownership_Rented_Households") from census_data group by census_data."State/UT" order by census_data."State/UT" asc;')
print(cursor.fetchall())
conn.commit()

# The distribution of different types of latrine facilities (pit latrine, flush latrine, etc.) in each state
cursor.execute('select census_data."State/UT",sum(census_data."Type_of_latrine_facility_Pit_latrine_Households")+ sum(census_data."Type_of_latrine_facility_Other_latrine_Households")+ sum(census_data."Type_of_latrine_facility_Night_soil_disposed_into_open_drain_Households")+ sum(census_data."Type_of_latrine_facility_Flush_pour_flush_latrine_connected_to_other_system_Households") from census_data group by census_data."State/UT" order by census_data."State/UT" asc;')
print(cursor.fetchall())
conn.commit()

# Households have access to drinking water sources near the premises in each state
cursor.execute('select census_data."State/UT",sum(census_data."Location_of_drinking_water_source_Near_the_premises_Households") from census_data group by census_data."State/UT" order by census_data."State/UT" asc;')
print(cursor.fetchall())
conn.commit()

# The average household income distribution in each state based on the power parity categories
cursor.execute('select census_data."State/UT",avg(census_data."Power_Parity_Less_than_Rs_45000")+ avg(census_data."Power_Parity_Rs_45000_90000")+ avg(census_data."Power_Parity_Rs_90000_150000")+ avg(census_data."Power_Parity_Rs_45000_150000")+ avg(census_data."Power_Parity_Rs_150000_240000")+ avg(census_data."Power_Parity_Rs_240000_330000")+ avg(census_data."Power_Parity_Rs_150000_330000")+ avg(census_data."Power_Parity_Rs_330000_425000")+ avg(census_data."Power_Parity_Rs_425000_545000")+ avg(census_data."Power_Parity_Rs_330000_545000")+ avg(census_data."Power_Parity_Above_Rs_545000") from census_data group by census_data."State/UT" order by census_data."State/UT" asc;')
print(cursor.fetchall())
conn.commit()

# The percentage of married couples with different household sizes in each state
cursor.execute('select census_data."State/UT", (sum(census_data."Married_couples_1_Households")+sum(census_data."Married_couples_2_Households")+sum(census_data."Married_couples_3_Households")+sum(census_data."Married_couples_3_or_more_Households")+sum(census_data."Married_couples_4_Households")+sum(census_data."Married_couples_5__Households"))/sum(census_data."Households")*100 as "Married couple percentage" from census_data group by census_data."State/UT" order by census_data."State/UT" asc;')
print(cursor.fetchall())
conn.commit()

# Households fall below the poverty line in each state based on the power parity categories
cursor.execute('select census_data."State/UT",sum(census_data."Power_Parity_Less_than_Rs_45000") from census_data group by census_data."State/UT" order by census_data."State/UT" asc;')
print(cursor.fetchall())
conn.commit()

# The overall literacy rate (percentage of literate population) in each state
cursor.execute('select census_data."State/UT",sum(census_data."Literate")/sum(census_data."Population")*100 as "Literacy Population" from census_data group by census_data."State/UT" order by census_data."State/UT" asc;')
print(cursor.fetchall())
conn.commit()

! apt-get install git

!git clone https://github.com/Dhanushvan/-Census-Data-Standardization-and-Analysis-Pipeline.git